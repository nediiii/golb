type Mutation {
  # auth
  "传入username和password获取token,或者传入token来刷新token"
  auth(username: String, password: String, token: String): JWT!

  # file
  singleUpload(file: Upload!): File! @hasLogin
  singleUploadWithPayload(req: UploadFile!): File! @hasLogin
  multipleUpload(files: [Upload!]!): [File!]! @hasLogin
  multipleUploadWithPayload(req: [UploadFile!]!): [File!]! @hasLogin

  # setting
  createSetting(key: String!, value: String!): Setting!
    @hasLogin
    @hasRole(role: "aRole")
  deleteSetting(id: ID!): Boolean! @hasLogin
  updateSetting(id: ID!, key: String, value: String): Setting! @hasLogin
  # role
  createRole(name: String!, description: String): Role! @hasLogin
  deleteRole(id: ID!): Boolean! @hasLogin
  updateRole(id: ID!, name: String, description: String): Role! @hasLogin

  # user
  createUser(slug: String!, name: String!, password: String!): User! @hasLogin
  deleteUser(id: ID!): Boolean! @hasLogin
  updateUser(
    id: ID!
    slug: String
    name: String
    email: String
    oldPassword: String
    newPassword: String
    bio: String
  ): User! @hasLogin

  # tag
  createTag(slug: String!, name: String!, description: String): Tag! @hasLogin
  deleteTag(id: ID!): Boolean! @hasLogin
  updateTag(id: ID!, slug: String, name: String, description: String): Tag!
    @hasLogin

  # post
  createPost(
    slug: String!
    title: String!
    markdown: String!
    html: String!
    primaryAuthorId: ID!
    tags: [String!]
    authors: [ID!]
    excerpt: String
    fetured: Boolean
    paged: Boolean
    publishedBy: Date
    image: String
    language: String
    status: String
  ): Post! @hasLogin
  deletePost(id: ID!): Boolean! @hasLogin
  updatePost(
    id: ID!
    slug: String
    title: String
    markdown: String
    html: String
    primaryAuthorId: ID
    tags: [String!]
    authors: [ID!]
    excerpt: String
    fetured: Boolean
    paged: Boolean
    publishedBy: Date
    image: String
    language: String
    status: String
  ): Post! @hasLogin
}
